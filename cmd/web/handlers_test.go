package main

import (
	"bytes"
	"net/http"
	"net/url"
	"testing"
)

//Testing handler
// func TestPing(t *testing.T) {
// 	// Initialize a new httptest.ResponseRecorder.
// 	rr := httptest.NewRecorder()

// 	// Initialize a new dummy http.Request.
// 	r, err := http.NewRequest("GET", "/", nil)
// 	if err != nil {
// 		t.Fatal(err)
// 	}
// 	// Call the ping handler function, passing in the
// 	// httptest.ResponseRecorder and http.Request.
// 	ping(rr, r)

// 	// Call the Result() method on the http.ResponseRecorder to get the
// 	// http.Response generated by the ping handler.
// 	rs := rr.Result()
// 	// We can then examine the http.Response to check that the status code
// 	// written by the ping handler was 200.
// 	if rs.StatusCode != http.StatusOK {
// 		t.Errorf("Expected status: %d but got %d", http.StatusOK, rs.StatusCode)
// 	}
// 	// And we can check that the response body written by the ping handler
// 	// equals "OK".
// 	defer rs.Body.Close()
// 	body, err := ioutil.ReadAll(rs.Body)
// 	if err != nil {
// 		t.Fatal(err)
// 	}

// 	if string(body) != "OK" {
// 		t.Errorf("Expected OK but got %s", string(body))
// 	}
// }

// func TestPing(t *testing.T) {
// 	// Create a new instance of our application struct. For now, this just
// 	// contains a couple of mock loggers (which discard anything written to
// 	// them).
// 	app := &application{
// 		infolog:  log.New(ioutil.Discard, "", 0),
// 		errorlog: log.New(ioutil.Discard, "", 0),
// 	}

// 	// We then use the httptest.NewTLSServer() function to create a new test
// 	// server, passing in the value returned by our app.routes() method as the
// 	// handler for the server. This starts up a HTTPS server which listens on a
// 	// randomly-chosen port of your local machine for the duration of the test.
// 	// Notice that we defer a call to ts.Close() to shutdown the server when
// 	// the test finishes.
// 	tls := httptest.NewTLSServer(app.routes())
// 	defer tls.Close()

// 	// The network address that the test server is listening on is contained
// 	// in the ts.URL field. We can use this along with the ts.Client().Get()
// 	// method to make a GET /ping request against the test server. This
// 	// returns a http.Response struct containing the response.
// 	rs, err := tls.Client().Get(tls.URL + "/ping")
// 	if err != nil {
// 		t.Fatal(err)
// 	}

// 	if rs.StatusCode != http.StatusOK {
// 		t.Errorf("want %q; got %q", http.StatusOK, rs.StatusCode)
// 	}

// 	body, err := ioutil.ReadAll(rs.Body)
// 	if err != nil {
// 		t.Fatal(err)
// 	}
// 	defer rs.Body.Close()

// 	if string(body) != "OK" {
// 		t.Errorf("want %q; got %q", "OK", string(body))
// 	}
// }

//After creating a test helper
func TestPing(t *testing.T) {
	app := newTestApplication(t)
	tls := newTestServer(t, app.routes())
	defer tls.Close()
	status, _, body := tls.get(t, "/ping")

	if status != http.StatusOK {
		t.Errorf("want %d; got %d", http.StatusOK, status)
	}

	if string(body) != "OK" {
		t.Errorf("want %q; got %q", "OK", string(body))
	}
}

func TestShowSnippet(t *testing.T) {
	app := newTestApplication(t)
	tls := newTestServer(t, app.routes())
	defer tls.Close()

	tests := []struct {
		name     string
		urlPath  string
		wantCode int
		wantBody []byte
	}{
		{"Valid ID", "/snippet/1", http.StatusOK, []byte("An old silent pond...")},
		{"Non-existent ID", "/snippet/2", http.StatusNotFound, nil},
		{"Negative ID", "/snippet/-1", http.StatusNotFound, nil},
		{"Decimal ID", "/snippet/1.23", http.StatusNotFound, nil},
		{"String ID", "/snippet/foo", http.StatusNotFound, nil},
		{"Empty ID", "/snippet/", http.StatusNotFound, nil},
		{"Trailing slash", "/snippet/1/", http.StatusNotFound, nil},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			status, _, body := tls.get(t, test.urlPath)
			if status != test.wantCode {
				t.Errorf("want %d; got %d", http.StatusOK, status)
			}

			if !bytes.Contains(body, test.wantBody) {
				t.Errorf("want %q; got %q", test.wantBody, body)
			}
		})
	}
}

func TestSignupUser(t *testing.T) {
	app := newTestApplication(t)
	tls := newTestServer(t, app.routes())
	defer tls.Close()

	// Make a GET /user/signup request and then extract the CSRF token from the
	// response body.
	_, _, body := tls.get(t, "/user/signup")
	csrfToken := extractCSRFToken(t, body)
	tests := []struct {
		name         string
		userName     string
		userEmail    string
		userPassword string
		csrfToken    string
		wantCode     int
		wantBody     []byte
	}{
		{"Valid submission", "Bob", "bob@example.com", "validPa$$word", csrfToken, http.StatusOK, nil},
		{"Empty name", "", "bob@example.com", "validPa$$word", csrfToken, http.StatusOK, []byte("This field can not be empty")},
		{"Empty email", "Bob", "", "validPa$$word", csrfToken, http.StatusOK, []byte("This field can not be empty")},
		{"Empty password", "Bob", "bob@example.com", "", csrfToken, http.StatusOK, []byte("This field can not be empty")},
		{"Invalid email (incomplete domain)", "Bob", "bob@example.", "validPa$$w", csrfToken, http.StatusOK, []byte("This field is invalid")},
		{"Invalid email (missing @)", "Bob", "bobexample.com", "validPa$$word", csrfToken, http.StatusOK, []byte("This field is invalid")},
		{"Invalid email (missing local part)", "Bob", "@example.com", "validPa$$", csrfToken, http.StatusOK, []byte("This field is invalid")},
		{"Short password", "Bob", "bob@example.com", "pa$$word", csrfToken, http.StatusOK, []byte("This field is too short (minimum is")},
		{"Duplicate email", "Bob", "dupe@example.com", "validPa$$word", csrfToken, http.StatusOK, nil},
		{"Invalid CSRF Token", "", "", "", "wrongToken", http.StatusBadRequest, nil},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			form := url.Values{}
			form.Add("name", tt.userName)
			form.Add("email", tt.userEmail)
			form.Add("password", tt.userPassword)
			form.Add("csrf_token", tt.csrfToken)
			code, _, body := tls.postForm(t, "/user/signup", form)
			if code != tt.wantCode {
				t.Errorf("want %d; got %d", tt.wantCode, code)
			}
			if !bytes.Contains(body, tt.wantBody) {
				t.Errorf("want body %s to contain %q", body, tt.wantBody)
			}
		})
	}
}
